library(LDLcalc)
devtools::check_win_release()
devtools::document()
---
title: "Variance calculation of LDL and AIP"
vignettes/
Variance_Calculation.pdf
Variance_Calculation.Rnw
vignette: >
%\VignetteIndexEntry{Variance calculation of LDL and AIP}
%\VignetteEngine{R.rsp::asis}
\documentclass{article}
\begin{document}
\end{document}
---
setwd(".")
setwd(".")
require(LDLcalc)
require(ggplot2)
require(gridExtra)
require(data.table)
require(tidyr)
LDL_Vrnc_Chng_CHOL <- do.call(cbind.data.frame, LDL_Vrnc_Chng_CHOL)
setwd(".")
require(LDLcalc)
require(ggplot2)
require(gridExtra)
require(data.table)
require(tidyr)
dfSmplA <- sampleA
dfSmplA$AIPrep1 <- AIPcalc(TG=dfSmplA$TGrep1,
HDL=dfSmplA$HDLrep1, SI=F)
dfSmplA$AIPrep2 <- AIPcalc(TG=dfSmplA$TGrep2,
HDL=dfSmplA$HDLrep2, SI=F)
dfSmplA$AIP <- AIPcalc(TG=dfSmplA$TG,
HDL=dfSmplA$HDL, SI=F)
# Create a list of the parameters to be plotted.
lstParam <- list("CHOL", "HDL", "TG")
# Use lapply to apply the PlotDiscrHist function to all parameters.
lstPlt <- lapply(lstParam, LDLcalc::PlotDiscrHist, DF=dfSmplA)
do.call("grid.arrange", c(lstPlt, ncol = 3))
rm(lstParam, lstPlt)
distr1 <- seq(from=100, to=130, by=1)
distr2 <- seq(from=140, to=170, by=1)
JSD(distr1, distr2)$JSD
rm(distr1, distr2)
LDLchebyshev <- chebyshev(vec=dfSmplA$LDL)
LDLchebyshev <- unlist(LDLchebyshev)
print(LDLchebyshev)
sum(dfSmplA$LDL>=157 & dfSmplA$LDL<=198) / nrow(dfSmplA) * 100
lstParam1 <- list("CHOL", "CHOL", "HDL")# List of the first parameter to calculate correlation on.
lstParam2 <- list("HDL", "TG", "TG")# List of the second parameter to calculate correlation on.
#Function to calculate correlation and covariance of the pairs of parameters
fCor <- function(param1, param2) {
correlation <- round(cor(dfSmplA[, param1], dfSmplA[, param2]), 2)
covariance <- round(cov(dfSmplA[, param1], dfSmplA[, param2]), 2)
return(list(correlation=correlation, covariance=covariance))
}
mtrxCorCov <- mapply(fCor, lstParam1, lstParam2)
colnames(mtrxCorCov) <- c("CHOL-HDL", "CHOL-TG", "HDL-TG")
print(mtrxCorCov)
grid.arrange(PlotCorrWithRegrLine(dfSmplA, "CHOL", "HDL"),
PlotCorrWithRegrLine(dfSmplA, "CHOL", "TG"),
PlotCorrWithRegrLine(dfSmplA, "HDL", "TG"),
ncol=3)
vecEmpirVar <- c("LDL Empirical Variance" = round(var(dfSmplA$LDL), 2),
"AIP Empirical Variance" = round(var(dfSmplA$AIP), 4))
print(vecEmpirVar)
LDLErrPrpVar <- LDLErrPrp(CHOL = dfSmplA$CHOL,
HDL = dfSmplA$HDL,
TG = dfSmplA$TG)
print(round(LDLErrPrpVar), 2)
AIPErrPrpVar1Ord <-
AIPErrPrp(TG = dfSmplA$TG,
HDL = dfSmplA$HDL,
SI = F)
AIPErrPrpVar2Ord <-
AIPErrPrp2Ord(TG = dfSmplA$TG,
HDL = dfSmplA$HDL,
SI = F)
AIPErrProp <- c("AIP First Order Error Propagation" = AIPErrPrpVar1Ord,
"AIP Second Order Error Propagation" = AIPErrPrpVar2Ord)
print(AIPErrProp)
vecVariances <- c(NA,
format(var(dfSmplA$LDL), nsmall=2),
format(LDLErrPrpVar, nsmall=2),
NA,
format(round(var(dfSmplA$AIP),5), nsmall=5),
format(AIPErrPrpVar1Ord, nsmall=5),
format(AIPErrPrpVar2Ord, nsmall=5))
dfVariances <-
cbind.data.frame(c("LDL",
"Empirical Variance",
"Error Propagation Variance",
"AIP",
"Empirical Variance",
"First-Order Error Propagation",
"Second-Order Error Propagation"),
vecVariances)
colnames(dfVariances) <- c("Variance type", "Variance Value")
options(knitr.kable.NA = "")
knitr::kable(dfVariances, format = "latex", longtable = F, position="!h",
caption="Empirical and Error Propagation Variance for LDL and AIP")
options(knitr.kable.NA = "")
knitr::kable(dfVariances, format = "latex", longtable = F, position="!h",
caption="Empirical and Error Propagation Variance for LDL and AIP")
LDLbootVar <- LDLbootVrnc(CHOL = dfSmplA$CHOL, HDL = dfSmplA$HDL,
TG = dfSmplA$TG, noOfReps = 1000, pb=F)
vecVariances <- c(NA,
format(var(dfSmplA$LDL), nsmall=2),
format(LDLErrPrpVar, nsmall=2),
format(median(LDLbootVar$Var), nsmall=2),
NA,
format(round(var(dfSmplA$AIP),5), nsmall=5),
format(AIPErrPrpVar1Ord, nsmall=5),
format(AIPErrPrpVar2Ord, nsmall=5),
format(round(median(AIPbootVar$Var),5), nsmall=5))
vecVariances <- c(NA,
format(var(dfSmplA$LDL), nsmall=2),
format(LDLErrPrpVar, nsmall=2),
format(median(LDLbootVar$Var), nsmall=2),
NA,
format(round(var(dfSmplA$AIP),5), nsmall=5),
format(AIPErrPrpVar1Ord, nsmall=5),
format(AIPErrPrpVar2Ord, nsmall=5),
format(round(median(AIPbootVar$Var),5), nsmall=5))
AIP_DensityPlotOfbootst(AIPbootVar$dataTable,
empirVrnc = vecEmpirVar[[2]],
errPropVrnc = AIPErrPrpVar1Ord,
errPropVrnc2Ord = AIPErrPrpVar2Ord)
LDL_Vrnc_Chng_TG <- do.call(cbind.data.frame, LDL_Vrnc_Chng_TG)
options(knitr.kable.NA = "")
knitr::kable(dfVariances, format = "latex", longtable = F,
caption="Empirical and Error Propagation Variance for LDL and AIP")
devtools::document()
R CMD build --compact-vignettes= try to compact PDF files under inst/doc:
"no" (default),both"
devtools::check_win_release()
devtools::build(args = c('--compact-vignettes="both"'))
devtools::check_win_release()
install.packages("testthat")
install.packages(c('caret', 'caretEnsemble', 'lares', 'corrplot', 'resample', 'glmnet', 'earth', 'kernlab', 'gbm', 'Cubist', 'randomForest', 'moments', 'janitor', 'philentropy', 'sets'))
install.packages(c('caret', 'caretEnsemble', 'lares', 'corrplot', 'resample', 'glmnet', 'earth', 'kernlab', 'gbm', 'Cubist', 'randomForest', 'moments', 'janitor', 'philentropy', 'sets'))
install.packages(c('caret', 'caretEnsemble', 'lares', 'corrplot', 'resample', 'glmnet', 'earth', 'kernlab', 'gbm', 'Cubist', 'randomForest', 'moments', 'janitor', 'philentropy', 'sets'))
library(LDLcalc)
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::document()
library(LDLcalc)
rcmdcheck::rcmdcheck()
rhub::check_for_cran()
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.56.1\\bin\\gswin32c.exe")
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.56.1\\bin\\gswin32c.exe")
rhub::check_for_cran()
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.56.1\\bin\\gswin64c.exe")
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.56.1\\bin\\gswin64c.exe")
rhub::check_for_cran()
rhub::check_for_cran()
library(LDLcalc)
devtool::check(cran=TRUE)
install.packages("devtool")
install.packages("devtool")
devtool::check(cran=TRUE)
devtools::check(cran=TRUE)
library(LDLcalc)
ls("package:LDLcalc")
![Provides information on the correlation between data metrics LDLd, HDL, TG, CHOL, and Age.](Corrplot.png){width=70%}
\
library(LDLcalc)
library(LDLcalc)
devtools::document()
devtools::check_win_release()
devtools::check_rhub()
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.56.1\\bin\\gswin64c.exe")
devtools::check_rhub()
devtools::document()
library(LDLcalc)
devtools::check(cran=TRUE)
devtools::check_win_release()
TGVariances = CV_Range(sampleA$TG,15,16,plot=FALSE)
library(LDLcalc)
TGVariances = CV_Range(sampleA$TG,15,16,plot=FALSE)
LDLTGSampleDependance = LDL_TGVrnc(TGVariances,sampleA$CHOL, sampleA$HDL, bootStrpReps =2000)
LDLTGSampleDependance = LDL_TGVrnc(TGVariances,sampleA$CHOL, sampleA$HDL, bootStrpReps =20)
LDLTGSampleDependance = LDL_TGVrnc(TGVariances,sampleA$CHOL, sampleA$HDL, bootStrpReps =1000)
LDLTGSampleDependance = LDL_TGVrnc(TGVariances,sampleA$CHOL, sampleA$HDL, bootStrpReps =100)
plotTGVrncToLDL(TGVariances,LDLTGSampleDependance$ErrPropVrnc,LDLTGSampleDependance$BootVrnc)
AIP_empirVrnc=var(sampleA$AIP)
AIP_empirVrnc=var(sampleA$AIP)
library(LDLcalc)
AIP_empirVrnc=var(sampleA$AIP)
sampleA$AIP = AIPcalc(sampleA$TG,sampleA$HDL, SI=FALSE)
AIP_empirVrnc=var(sampleA$AIP)
AIP_errPropVrnc=AIPErrPrp(sampleA$TG,sampleA$HDL, SI=FALSE)
AIP_errPropVrnc2Ord=AIPErrPrp2Ord(sampleA$TG,sampleA$HDL, SI=FALSE)
DfAIPboost=as.data.frame(AIPbootVrnc(sampleA$TG,sampleA$HDL, SI=FALSE))
AIP_DensityPlotOfbootst(DfAIPboost,"Title",AIP_empirVrnc, AIP_errPropVrnc, AIP_errPropVrnc2Ord)
devtools::document()
library(LDLcalc)
CsvRead(LDLcalc_2.0.tar.gz)
# Read the .csv file
CsvRead<-function(CsvData){
if (length(class(CsvData)) == 1 && class(CsvData) == "character"){
Data<-data.table::fread(CsvData)
return(Data)
}
else if (sum(ifelse(class(CsvData) == c("data.table","data.frame"),1,0)) == 2){
return(CsvData)
}
else
{
stop("The data you entered is in neither .csv nor data.table format.")
}
}
CsvRead(LDLcalc_2.0.tar.gz)
setwd("C:/Users/ppapl/Desktop/LDLcalc")
setwd("C:/Users/ppapl/Desktop/LDLcalc")
CsvRead(LDLcalc_2.0.tar.gz)
CsvRead("LDLcalc_2.0.tar.gz")
setwd("~/MEGA/Work/N172")
CsvRead("Anno_172.xlsx")
setwd("~/MEGA/Work/N172")
a=CsvRead("Anno_172.xlsx")
devtools::document()
library(LDLcalc)
devtools::build(args = c('--compact-vignettes="both"'))
R CMD check LDLcalc_2.0.tar.gz
devtools::build(args = c('--compact-vignettes="both"'))
setwd("C:/Users/ppapl/Desktop")
R CMD check LDLcalc_2.0.tar.gz
setwd("C:/Users/ppapl/Desktop")
devtools::document()
library(LDLcalc)
devtools::document()
library(LDLcalc)
devtools::build(args = c('--compact-vignettes="both"'))
rcmdcheck::rcmdcheck(build_args = c('--compact-vignettes=gs+qpdf'))
rcmdcheck::rcmdcheck(build_args = c('--compact-vignettes=both'))
tools:::.build_packages(c("--compact-vignettes", "C:/Users/ppapl/Desktop/LDLcalc/vignettes"))
tools:::.build_packages(c("--compact-vignettes", "C:/Users/ppapl/Desktop/LDLcalc/vignettes"))
tools:::.build_packages(c("--compact-vignettes", "C:/Users/ppapl/Desktop/LDLcalc/vignettes/Variance_Calculation1.Rmd"))
tools:::.build_packages(c("--compact-vignettes", "C:/Users/ppapl/Desktop/LDLcalc/vignettes/Variance_Calculation1.Rmd"))
R CMD build
setwd("C:/Users/ppapl/Desktop/LDLcalc")
R CMD build##
library(LDLcalc)
setwd("C:/Users/ppapl/Desktop")
setwd("C:/Users/ppapl/Desktop/LDLcalc")
devtools::build(args = c('--compact-vignettes="both"'))
devtools::document()
library(LDLcalc)
devtools::build(args = c('--compact-vignettes="both"'))
devtools::document()
devtools::document()
devtools::document()
library(LDLcalc)
devtools::build(args = c('--compact-vignettes="both"'))
devtools::document()
library(LDLcalc)
devtools::build(args = c('--compact-vignettes="both"'))
MSET=readRDS("178_MSET.rds")
Anno_178_reordered=readRDS("Anno_178_reordered.rds")
class=Anno_178_reordered[,5]
MSET=as.data.frame(t(MSET))
rownames(MSET)=rownames(Anno_178_reordered)
metadata=as.data.frame(x=class)
a=df_impFilter
model = LDL_ML_Main(SampleData,0.7,"lm",ReportMultiPlot=FALSE)
library(LDLcalc)
model = LDL_ML_Main(SampleData,0.7,"lm",ReportMultiPlot=FALSE)
devtools::document()
devtools::document()
devtools::document()
library(LDLcalc)
devtools::build(args = c('--compact-vignettes="both"'))
